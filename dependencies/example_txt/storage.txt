# app/utils/storage.py
from datetime import datetime
import os
from typing import Optional

from fastapi import HTTPException, UploadFile
from app.core.config import settings


# Get the base project path (two levels up from this file)
BASE_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../"))

# Full storage path
FULL_STORAGE_PATH = os.path.join(BASE_PATH, settings.STORAGE_PATH)
os.makedirs(FULL_STORAGE_PATH, exist_ok=True)


def upload_file(
    file: UploadFile,
    folder: Optional[str] = "uploads",
    allowed_types: Optional[list[str]] = None,
) -> str:
    """
    Save an uploaded file with a unique name in storage folder.

    Args:
        file (UploadFile): The uploaded file.
        folder (str, optional): The folder to save the file in. Defaults to "uploads".
        allowed_types (list[str], optional): List of allowed file types. Defaults to None.

    Returns:
        str: The full path of the saved file.
    """
    try:
        # Validate file type
        if allowed_types and file.content_type not in allowed_types:
            raise HTTPException(
                status_code=400, detail=f"File type '{file.content_type}' not allowed"
            )

        # Prepare folder
        save_folder = os.path.join(FULL_STORAGE_PATH, folder)
        os.makedirs(save_folder, exist_ok=True)

        # Generate unique file name
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        file_name = f"{timestamp}_{file.filename}"

        # Prepare file path
        file_path = os.path.join(save_folder, file_name)
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # Save file
        with open(file_path, "wb") as buffer:
            buffer.write(file.file.read())

        # Return relative path from STORAGE_PATH
        relative_path = str(os.path.join(folder, file_name)).replace("\\", "/")
        return relative_path

    except HTTPException as e:
        raise

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def get_full_path(relative_path: str) -> str:
    # Return proper OS path for file operations
    return os.path.join(FULL_STORAGE_PATH, relative_path)

def get_file_url(relative_path: str) -> str:
    """
    Generate a public-accessible URL for stored files.
    """
    base_url = settings.APP_URL.strip().rstrip("/")
    protocol = "http://" if not base_url.startswith(("http://", "https://")) else ""
    return f"{protocol}{base_url}/{settings.ROUTER_PREFIX}/files/{relative_path}"

import logging
from sqlalchemy import create_engine, event
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.engine import URL

from app.core.config import settings

# Configure logging
logger = logging.getLogger(__name__)

# Build database URL
url_db = URL.create(
    drivername="mysql+pymysql",
    username=settings.DB_USERNAME,
    password=settings.DB_PASSWORD,
    host=settings.DB_HOST,
    port=settings.DB_PORT,
    database=settings.DB_DATABASE,
)

# Create SQLAlchemy engine with optimized pool settings
try:
    engine = create_engine(
        url_db,
        pool_pre_ping=True,       # ensures stale connections are checked
        pool_size=20,             # initial pool size
        max_overflow=20,          # additional connections beyond pool_size
        pool_timeout=30,          # wait time before giving up on connection
        pool_recycle=1800,        # recycle connections every 30 minutes
        echo=False
    )
except SQLAlchemyError as e:
    logger.exception("Failed to create database engine")
    raise e

# Session factory
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# Base class for models
Base = declarative_base()

# --- Connection Pool Event Listeners ---
@event.listens_for(engine, "connect")
def log_connect(dbapi_connection, connection_record):
    print("\033[92m✅ New DB connection created\033[0m")

@event.listens_for(engine, "checkout")
def log_checkout(dbapi_connection, connection_record, connection_proxy):
    print("\033[91m➡️  DB connection checked out\033[0m")

@event.listens_for(engine, "checkin")
def log_checkin(dbapi_connection, connection_record):
    print("\033[94m⬅️  DB connection returned to pool\033[0m")


# Dependency for FastAPI or other usage
def get_session():
    """Yield a database session and ensure proper closing."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()